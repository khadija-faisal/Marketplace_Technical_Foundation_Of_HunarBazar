/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  stripeCheckoutSessionId?: string;
  stripeCustomerId?: string;
  clerkUserId?: string;
  customerName?: string;
  email?: string;
  stripePaymentIntentId?: string;
  Products?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "products";
    };
    quantity?: number;
    _key: string;
  }>;
  totalPrice?: number;
  currency?: string;
  amountDiscount?: number;
  status?: "pending" | "paid" | "shipped" | "delivered" | "cancelled";
  orderDate?: string;
};

export type Products = {
  _id: string;
  _type: "products";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: string;
  slug?: Slug;
  productImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  status?: "NEW" | "HOT" | "SALE";
};

export type Sale = {
  _id: string;
  _type: "sale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  salebadge?: string;
  discountamount?: number;
  coupon?: string;
  validStart?: string;
  validEnd?: string;
  active?: boolean;
  Image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  Image2?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  Image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Order | Products | Sale | Category | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/helpers/queries.ts
// Variable: SALE_QUERY
// Query: *[_type == 'sale' && active == true] | order(name asc){     title,    description,    salebadge,    discountamount,    coupon,    validStart,    validEnd,    "imageUrl": Image.asset->url,    "image2Url": Image2.asset->url,}
export type SALE_QUERYResult = Array<{
  _id: string
  title: string | null;
  description: string | null;
  salebadge: string | null;
  discountamount: number | null;
  coupon: string | null;
  validStart: string | null;
  validEnd: string | null;
  imageUrl: string | null;
  image2Url: string | null;
}>;
// Variable: PRODUCTS_QUERY
// Query: *[_type == 'products' ] | order(name asc)
export type PRODUCTS_QUERYResult = Array<{
  _id: string;
  _type: "products";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: string;
  slug?: Slug;
  productImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  status?: "HOT" | "NEW" | "SALE";
}>;
// Variable: CATEGORIES_QUERY
// Query: *[_type == 'category'] | order(name asc)
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  Image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
}>;
// Variable: PRODUCT_BY_SLUG
// Query: *[_type == 'products' && slug.current == $slug] | order(name asc)[0]
export type PRODUCT_BY_SLUGResult = {
  _id: string;
  _type: "products";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: string;
  slug?: Slug;
  productImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  status?: "HOT" | "NEW" | "SALE";
} | null;
// Variable: PRODUCT_SEARCH_QUERY
// Query: *[_type == "products" && (  lower(product) match lower($searchParam + "*") ||   lower(description) match lower($searchParam + "*"))]
export type PRODUCT_SEARCH_QUERYResult = Array<{
  _id: string;
  _type: "products";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: string;
  slug?: Slug;
  productImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  status?: "HOT" | "NEW" | "SALE";
}>;
// Variable: PRODUCT_BY_CATEGORY
// Query: *[_type == "products" && references(*[_type == "category" && slug.current == $CategorySlug]._id)] | order(product asc)
export type PRODUCT_BY_CATEGORYResult = Array<{
  _id: string;
  _type: "products";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: string;
  slug?: Slug;
  productImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  status?: "HOT" | "NEW" | "SALE";
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == 'sale' && active == true] | order(name asc){\n     title,\n    description,\n    salebadge,\n    discountamount,\n    coupon,\n    validStart,\n    validEnd,\n    \"imageUrl\": Image.asset->url,\n    \"image2Url\": Image2.asset->url,\n}": SALE_QUERYResult;
    "*[_type == 'products' ] | order(name asc)": PRODUCTS_QUERYResult;
    "*[_type == 'category'] | order(name asc)": CATEGORIES_QUERYResult;
    "*[_type == 'products' && slug.current == $slug] | order(name asc)[0]": PRODUCT_BY_SLUGResult;
    "*[_type == \"products\" && (\n  lower(product) match lower($searchParam + \"*\") || \n  lower(description) match lower($searchParam + \"*\")\n)]": PRODUCT_SEARCH_QUERYResult;
    "*[_type == \"products\" && references(*[_type == \"category\" && slug.current == $CategorySlug]._id)] | order(product asc)": PRODUCT_BY_CATEGORYResult;
  }
}
